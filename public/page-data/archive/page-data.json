{"componentChunkName":"component---src-pages-archive-js","path":"/archive/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"date":"2019-03-01","title":"Big Data Analytics on Wikipedia","tech":["Python","Java","MapReduce","HDFS","AWS EMR","Terraform"],"github":"","external":"https://medium.com/@manishsombansh/big-data-analytics-7e2641cf42ec","company":"CMU"},"html":"<p>Performed ETL on a Wikipedia dataset of 128GB, using Python and Bash. Developed a MapReduce program and deployed it with AWS EMR, using Hadoop Streaming. Gained insights related to Wikipedia topics and page views.</p>"}},{"node":{"frontmatter":{"date":"2019-03-01","title":"Developing and Hosting a Cloud Based Chat Service","tech":["Java Spring Suite","Redis Pub/Sub","MySQL","Docker","Kubernetes","Helm & YAML","Google Container Registry & Kubernetes Engine","Azure Kubernetes Cluster","Terraform","GCP & Azure"],"github":"","external":"https://medium.com/@manishsombansh/wecloud-chat-as-a-service-c32c6ef90ba6","company":"CMU"},"html":"<p>Created a WeChat like application with Microservices pattern : Designed and developed 3 services, login, group chat, and profile; Modeled the interaction between services as directed acyclic graph. Implemented the REST APIs of login, group chat and the profile service using Java, Spring web-socket, Helm and used Redis Pub/Sub as a messaging service to improve the scalability of the group chat service. Deployed the services using Docker, Kubernetes, and Helm across multiple cloud platforms (GCP and Azure) for fault-tolerance; Monitored the CPU utilization metrics and automatically augmented the pods and added the auto-scaling feature with Kubernetes HPA.</p>"}},{"node":{"frontmatter":{"date":"2019-03-01","title":"Machine Learning on the Cloud","tech":["Python Flask","GCP","Machine Learning","Hyperparameter Tuning","NLP","Text2Speech","Speech2Text","Google Maps API"],"github":"","external":"https://medium.com/@manishsombansh/predicting-cab-fare-prices-8aef8ad34c92","company":"CMU"},"html":"<p>Performed data exploration, cleaning and feature engineering for building a machine learning model using XGBoost algorithm to predict cab fare prices in NYC. Deployed the model onto Google cloud machine learning engine and used Hyperparameter tuning to optimize the model and increase accuracy. Built a fare prediction web service using Google App Engine to predict fare prices on basis of attributes like pickup<em>datetime, pickup</em>longitude, dropoff_longitude etc by using the model hosted on ML engine. Developed a machine learning application which accepts speech queries and responds with a speech result in the context of fare prediction by using GCP API’s (text to speech, speech to text, NLP, Google Maps). Enhanced the fare prediction API by accepting images of landmarks as the trip pickup and drop off locations using Google Cloud Vision and AutoML API’s.</p>"}},{"node":{"frontmatter":{"date":"2019-03-01","title":"Built a Social Networking Timeline","tech":["GCP","Neo4j","MongoDB","MySQL","Terraform","Java","Cypher Query Language","Maven"],"github":"","external":"https://medium.com/@manishsombansh/building-a-social-networking-timeline-42140049a57f","company":"CMU"},"html":"<p>A social networking timeline similar to Facebook.</p>"}},{"node":{"frontmatter":{"date":"2019-03-01","title":"Most Influential Users from Twitter Social Graph using Spark","tech":["Apache Spark","Scala","SparkSQL","Microsoft Azure","Azure HDInsight","Azure Databricks"],"github":"","external":"https://medium.com/@manishsombansh/most-influential-users-from-twitter-social-graph-using-spark-eb4198205351","company":"CMU"},"html":"<p>Implemented an iterative computation on a Twitter social graph (10GB) to rank each user by their influence using the graph-parallel framework GraphLab to implement the PageRank algorithm using Apache Spark and Scala. Deployed the Spark program on Azure HDInsight and optimized it to meet performance objectives by tuning parameters in Spark configuration and writing effective code in Spark-Scala. Deployed the same application on Azure Databricks to understand performance boosts and platform improvements when compared to Azure HDInsight while running Spark jobs.</p>"}},{"node":{"frontmatter":{"date":"2019-03-01","title":"Scalable High-Performance Twitter Analytics Web Service","tech":["Java","Undertow","Apache Spark","Scala","Maven","MySQL","Apache HBase","Terraform","Google Cloud Platform (GCP)","AWS CloudWatch"],"github":"","external":"https://medium.com/@manishsombansh/scalable-high-performance-twitter-analytics-web-service-28a3b524dcaf","company":"CMU"},"html":"<p>Implemented a high performance, fault-tolerant web service on AWS EC2 clusters for 1TB Twitter data analysis with read queries and achieved over 25,000 RPS on a limited budget given to work upon. Processed 1TB raw data using Apache Spark and Scala to perform ETL and load data into MySQL and HBase database systems. Used Undertow framework and load balancer for front end. Employed backend using MySQL and HBase, improved performance by implementing several optimizations ranging from schema design, database parameter tuning, horizontal scaling, replication and sharding, and monitored performance using AWS CloudWatch to identify performance bottlenecks. Migrated the web service to use managed web services provided by Amazon in the final phase of the project. Used AWS LightSail for the front end and RDS, Aurora for the backend.</p>"}},{"node":{"frontmatter":{"date":"2019-03-01","title":"Uber Like Application for Cab Matching","tech":["Java","Apache Kafka","Samza","AWS EMR"],"github":"","external":"https://medium.com/@manishsombansh/building-an-uber-like-cab-service-e3c9efacf117","company":"CMU"},"html":"<p>Designed and implemented a realistic solution to join and process multiple streams of GPS data using Samza API to setup a driver matching service like Uber. Generated streams of data using Kafka Producer and made it available for Samza consumer. Developed an application to process streams of IoT device data and static data using Samza to setup an advertising system of restaurants for the rider once he gets into the cab based on his interests.</p>"}},{"node":{"frontmatter":{"date":"2019-03-01","title":"YouTube like Video Processing and Streaming Application","tech":["Java","AWS S3","SNS","AWS Lambda","AWS Rekognition","FFmpeg","AWS CloudSearch"],"github":"","external":"https://medium.com/@manishsombansh/building-a-youtube-like-application-643aa6ba3c5e","company":"CMU"},"html":"<p>Configured and provisioned AWS S3, Lambda and SNS with a thumbnail generator function using Java to generate thumbnails for uploaded videos. Used AWS Lambda and Rekognition API to detect labels from the thumbnails and use them to classify an image. Implemented a video searching feature for a YouTube like application using AWS CloudSearch for users to search videos by content. Generated gifs for uploaded videos when user hovers on a particular video search result.</p>"}},{"node":{"frontmatter":{"date":"2019-02-28","title":"Android application with interactive dashboard","tech":["Java","REST API's","Android Studio","Heroku","Docker"],"github":"","external":"","company":"CMU"},"html":"<p>Developed a RESTful webservice to fetch an artist’s albums from iTunes store using the iTunes API and deployed it to Heroku Cloud. Built an android application interacting with the Cloud API to fetch the album details by accepting an artist name as input. Developed an analytical dashboard for application statistics and integrated it with MongoDB over Heroku Cloud.</p>"}},{"node":{"frontmatter":{"date":"2019-02-28","title":"AWS Cloud Resources Autoscaling","tech":["Java","AWS","Elastic Load Balancer"],"github":"","external":"","company":"CMU"},"html":"<p>Developed solutions that invoke cloud APIs to programmatically provision and de-provision resources based on the current load to optimize cloud resource usage and minimize costs. Configured an Elastic Load Balancer and Auto Scaling Rules in AWS to distribute load across cloud servers and provision against resource failure.</p>"}},{"node":{"frontmatter":{"date":"2019-02-28","title":"Distributed Key-Value Stores with Strong (Casual) and Eventual Consistencies","tech":["Java","AWS","Multi-threading","Cross Regional Cloud Storage"],"github":"","external":"","company":"CMU"},"html":"<p>Implemented a replicated cross-regional cloud storage system on AWS to handle requests using strong and eventual consistency on basis of timestamp. Used multithreading and priority queue for controlled access to the key value store and synchronizing all data centers.</p>"}}]}},"pageContext":{}}}